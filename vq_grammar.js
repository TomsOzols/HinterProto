(function() {
    vq_grammar = (function() {
        "use strict";

        /*
         * Generated by PEG.js 0.9.0.
         *
         * http://pegjs.org/
         */
        var isObject = function(obj) {
            var type = typeof obj;
            return type === 'function' || type === 'object' && !!obj;
        };

        var makeString = function(o) {
            var str = '';
            _.each(o, function(val) {

                if (typeof val == 'string') {
                    str += val;
                } else {

                    if (isObject(val)) {
                        str += makeString(val);
                    }
                }
            });

            return str;
        };

        function peg$subclass(child, parent) {
            function ctor() {
                this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
        }

        function peg$SyntaxError(message, expected, found, location) {
            this.message = message;
            this.expected = expected;
            this.found = found;
            this.location = location;
            this.name = "SyntaxError";

            if (typeof Error.captureStackTrace === "function") {
                Error.captureStackTrace(this, peg$SyntaxError);
            }
        }

        peg$subclass(peg$SyntaxError, Error);

        function peg$parse(input) {
            var options = arguments.length > 1 ? arguments[1] : {},
                parser = this,

                peg$FAILED = {},

                peg$startRuleFunctions = {
                    Main: peg$parseMain
                },
                peg$startRuleFunction = peg$parseMain,

                peg$c0 = "[ ]",
                peg$c1 = {
                    type: "literal",
                    value: "[ ]",
                    description: "\"[ ]\""
                },
                peg$c2 = "[ + ]",
                peg$c3 = {
                    type: "literal",
                    value: "[ + ]",
                    description: "\"[ + ]\""
                },
                peg$c4 = "(no_class)",
                peg$c5 = {
                    type: "literal",
                    value: "(no_class)",
                    description: "\"(no_class)\""
                },
                peg$c6 = "{",
                peg$c7 = {
                    type: "literal",
                    value: "{",
                    description: "\"{\""
                },
                peg$c8 = "}",
                peg$c9 = {
                    type: "literal",
                    value: "}",
                    description: "\"}\""
                },
                peg$c10 = function(ValueScope) {
                    return {
                        ValueScope: ValueScope
                    }
                },
                peg$c11 = "..",
                peg$c12 = {
                    type: "literal",
                    value: "..",
                    description: "\"..\""
                },
                peg$c13 = function(IntStart, IntEnd) {
                    return transformExpressionIntegerScopeToList(IntStart, IntEnd)
                },
                peg$c14 = ".",
                peg$c15 = {
                    type: "literal",
                    value: ".",
                    description: "\".\""
                },
                peg$c16 = "(.)",
                peg$c17 = {
                    type: "literal",
                    value: "(.)",
                    description: "\"(.)\""
                },
                peg$c18 = function() {
                    return {
                        classExpr: "true"
                    }
                },
                peg$c19 = function(ConditionalOrExpression) {
                    return {
                        ConditionalOrExpression: ConditionalOrExpression
                    }
                },
                peg$c20 = "||",
                peg$c21 = {
                    type: "literal",
                    value: "||",
                    description: "\"||\""
                },
                peg$c22 = "or",
                peg$c23 = {
                    type: "literal",
                    value: "OR",
                    description: "\"OR\""
                },
                peg$c24 = function(OROriginal) {
                    return {
                        OROriginal: "||"
                    }
                },
                peg$c25 = function(ConditionalAndExpression) {
                    return {
                        ConditionalAndExpression: ConditionalAndExpression
                    }
                },
                peg$c26 = "&&",
                peg$c27 = {
                    type: "literal",
                    value: "&&",
                    description: "\"&&\""
                },
                peg$c28 = "and",
                peg$c29 = {
                    type: "literal",
                    value: "AND",
                    description: "\"AND\""
                },
                peg$c30 = function(ANDOriginal) {
                    return {
                        ANDOriginal: "&&"
                    }
                },
                peg$c31 = function(RelationalExpression) {
                    return {
                        RelationalExpression: RelationalExpression
                    }
                },
                peg$c32 = function(NumericExpressionL) {
                    return {
                        NumericExpressionL: NumericExpressionL
                    }
                },
                peg$c33 = function(NumericExpressionL, Relation, NumericExpressionR) {
                    return {
                        NumericExpressionL: NumericExpressionL,
                        Relation: Relation,
                        NumericExpressionR: NumericExpressionR
                    }
                },
                peg$c34 = function(classExpr, Relation, NumericExpressionR) {
                    return {
                        classExpr: "true",
                        Relation: Relation,
                        NumericExpressionR: NumericExpressionR
                    }
                },
                peg$c35 = function(NumericExpressionL, Relation, classExpr) {
                    return {
                        NumericExpressionL: NumericExpressionL,
                        Relation: Relation,
                        classExpr: "true"
                    }
                },
                peg$c36 = function(NumericExpressionL, Relation, ExpressionList) {
                    return {
                        NumericExpressionL: NumericExpressionL,
                        Relation: Relation,
                        ExpressionList: ExpressionList
                    }
                },
                peg$c37 = "in",
                peg$c38 = {
                    type: "literal",
                    value: "IN",
                    description: "\"IN\""
                },
                peg$c39 = function() {
                    return "IN"
                },
                peg$c40 = "not",
                peg$c41 = {
                    type: "literal",
                    value: "NOT",
                    description: "\"NOT\""
                },
                peg$c42 = function() {
                    return "NOT"
                },
                peg$c43 = function(Not) {
                    return Not.join("")
                },
                peg$c44 = function(AdditiveExpression) {
                    return {
                        AdditiveExpression: AdditiveExpression
                    }
                },
                peg$c45 = function(MultiplicativeExpression, MultiplicativeExpressionList) {
                    return {
                        MultiplicativeExpression: MultiplicativeExpression,
                        MultiplicativeExpressionList: MultiplicativeExpressionList
                    }
                },
                peg$c46 = "++",
                peg$c47 = {
                    type: "literal",
                    value: "++",
                    description: "\"++\""
                },
                peg$c48 = function(Concat, MultiplicativeExpression) {
                    return {
                        Concat: Concat,
                        MultiplicativeExpression
                    }
                },
                peg$c49 = "+",
                peg$c50 = {
                    type: "literal",
                    value: "+",
                    description: "\"+\""
                },
                peg$c51 = "-",
                peg$c52 = {
                    type: "literal",
                    value: "-",
                    description: "\"-\""
                },
                peg$c53 = function(Additive, MultiplicativeExpression) {
                    return {
                        Additive: Additive,
                        MultiplicativeExpression
                    }
                },
                peg$c54 = function(UnaryExpression, UnaryExpressionList) {
                    return {
                        UnaryExpression: UnaryExpression,
                        UnaryExpressionList: UnaryExpressionList
                    }
                },
                peg$c55 = "!",
                peg$c56 = {
                    type: "literal",
                    value: "!",
                    description: "\"!\""
                },
                peg$c57 = function(Additive, PrimaryExpression) {
                    return {
                        Additive: Additive,
                        PrimaryExpression: PrimaryExpression
                    }
                },
                peg$c58 = function(PrimaryExpression) {
                    return {
                        PrimaryExpression: PrimaryExpression
                    }
                },
                peg$c59 = "*",
                peg$c60 = {
                    type: "literal",
                    value: "*",
                    description: "\"*\""
                },
                peg$c61 = "/",
                peg$c62 = {
                    type: "literal",
                    value: "/",
                    description: "\"/\""
                },
                peg$c63 = function(Unary, UnaryExpression) {
                    return {
                        Unary: Unary,
                        UnaryExpression: UnaryExpression
                    }
                },
                peg$c64 = function(BooleanLiteral) {
                    return {
                        BooleanLiteral: BooleanLiteral
                    }
                },
                peg$c65 = "true",
                peg$c66 = {
                    type: "literal",
                    value: "true",
                    description: "\"true\""
                },
                peg$c67 = function() {
                    return "true"
                },
                peg$c68 = "false",
                peg$c69 = {
                    type: "literal",
                    value: "false",
                    description: "\"false\""
                },
                peg$c70 = function() {
                    return "false"
                },
                peg$c71 = function(RDFLiteral) {
                    return {
                        RDFLiteral: RDFLiteral
                    }
                },
                peg$c72 = function(String, LANGTAG) {
                    return {
                        String: makeVar(String),
                        LANGTAG: makeVar(LANGTAG)
                    }
                },
                peg$c73 = "^^",
                peg$c74 = {
                    type: "literal",
                    value: "^^",
                    description: "\"^^\""
                },
                peg$c75 = function(String, iri) {
                    return {
                        String: makeVar(String),
                        iri: iri
                    }
                },
                peg$c76 = "(",
                peg$c77 = {
                    type: "literal",
                    value: "(",
                    description: "\"(\""
                },
                peg$c78 = ")",
                peg$c79 = {
                    type: "literal",
                    value: ")",
                    description: "\")\""
                },
                peg$c80 = function(BrackettedExpression) {
                    return {
                        BrackettedExpression: BrackettedExpression
                    }
                },
                peg$c81 = function(Aggregate) {
                    return {
                        Aggregate: Aggregate
                    }
                },
                peg$c82 = function(Aggregate, Expression) {
                    return {
                        Aggregate: "COUNT",
                        DISTINCT: "DISTINCT",
                        Expression: Expression
                    }
                },
                peg$c83 = function(Aggregate, DISTINCT, Expression) {
                    return {
                        Aggregate: Aggregate,
                        DISTINCT: DISTINCT,
                        Expression: Expression
                    }
                },
                peg$c84 = function(Aggregate, Expression) {
                    return {
                        Aggregate: Aggregate,
                        Expression: Expression
                    }
                },
                peg$c85 = function(Aggregate, DISTINCT, Expression, SEPARATOR) {
                    return {
                        Aggregate: Aggregate,
                        DISTINCT: DISTINCT,
                        Expression: Expression,
                        SEPARATOR: SEPARATOR
                    }
                },
                peg$c86 = function(Aggregate, Expression, SEPARATOR) {
                    return {
                        Aggregate: Aggregate,
                        Expression: Expression,
                        SEPARATOR: SEPARATOR
                    }
                },
                peg$c87 = "count_distinct",
                peg$c88 = {
                    type: "literal",
                    value: "COUNT_DISTINCT",
                    description: "\"COUNT_DISTINCT\""
                },
                peg$c89 = function() {
                    return "COUNT_DISTINCT"
                },
                peg$c90 = "distinct",
                peg$c91 = {
                    type: "literal",
                    value: "DISTINCT",
                    description: "\"DISTINCT\""
                },
                peg$c92 = function() {
                    return "DISTINCT"
                },
                peg$c93 = "count",
                peg$c94 = {
                    type: "literal",
                    value: "COUNT",
                    description: "\"COUNT\""
                },
                peg$c95 = function() {
                    return "COUNT"
                },
                peg$c96 = "sum",
                peg$c97 = {
                    type: "literal",
                    value: "SUM",
                    description: "\"SUM\""
                },
                peg$c98 = function() {
                    return "SUM"
                },
                peg$c99 = "min",
                peg$c100 = {
                    type: "literal",
                    value: "MIN",
                    description: "\"MIN\""
                },
                peg$c101 = function() {
                    return "MIN"
                },
                peg$c102 = "max",
                peg$c103 = {
                    type: "literal",
                    value: "MAX",
                    description: "\"MAX\""
                },
                peg$c104 = function() {
                    return "MAX"
                },
                peg$c105 = "avg",
                peg$c106 = {
                    type: "literal",
                    value: "AVG",
                    description: "\"AVG\""
                },
                peg$c107 = function() {
                    return "AVG"
                },
                peg$c108 = "sample",
                peg$c109 = {
                    type: "literal",
                    value: "SAMPLE",
                    description: "\"SAMPLE\""
                },
                peg$c110 = function() {
                    return "SAMPLE"
                },
                peg$c111 = "group_concat",
                peg$c112 = {
                    type: "literal",
                    value: "GROUP_CONCAT",
                    description: "\"GROUP_CONCAT\""
                },
                peg$c113 = function() {
                    return "GROUP_CONCAT"
                },
                peg$c114 = "separator",
                peg$c115 = {
                    type: "literal",
                    value: "SEPARATOR",
                    description: "\"SEPARATOR\""
                },
                peg$c116 = function() {
                    return "SEPARATOR"
                },
                peg$c117 = ";",
                peg$c118 = {
                    type: "literal",
                    value: ";",
                    description: "\";\""
                },
                peg$c119 = "=",
                peg$c120 = {
                    type: "literal",
                    value: "=",
                    description: "\"=\""
                },
                peg$c121 = ",",
                peg$c122 = {
                    type: "literal",
                    value: ",",
                    description: "\",\""
                },
                peg$c123 = function(comma, SEPAR) {
                    return makeVar(SEPAR)
                },
                peg$c124 = function(FunctionExpression) {
                    return {
                        FunctionExpression: FunctionExpression
                    }
                },
                peg$c125 = "str",
                peg$c126 = {
                    type: "literal",
                    value: "STR",
                    description: "\"STR\""
                },
                peg$c127 = function() {
                    return "STR"
                },
                peg$c128 = "lang",
                peg$c129 = {
                    type: "literal",
                    value: "LANG",
                    description: "\"LANG\""
                },
                peg$c130 = function() {
                    return "LANG"
                },
                peg$c131 = "datatype",
                peg$c132 = {
                    type: "literal",
                    value: "DATATYPE",
                    description: "\"DATATYPE\""
                },
                peg$c133 = function() {
                    return "DATATYPE"
                },
                peg$c134 = "iri",
                peg$c135 = {
                    type: "literal",
                    value: "IRI",
                    description: "\"IRI\""
                },
                peg$c136 = function() {
                    return "IRI"
                },
                peg$c137 = "uri",
                peg$c138 = {
                    type: "literal",
                    value: "URI",
                    description: "\"URI\""
                },
                peg$c139 = function() {
                    return "URI"
                },
                peg$c140 = "abs",
                peg$c141 = {
                    type: "literal",
                    value: "ABS",
                    description: "\"ABS\""
                },
                peg$c142 = function() {
                    return "ABS"
                },
                peg$c143 = "ceil",
                peg$c144 = {
                    type: "literal",
                    value: "CEIL",
                    description: "\"CEIL\""
                },
                peg$c145 = function() {
                    return "CEIL"
                },
                peg$c146 = "floor",
                peg$c147 = {
                    type: "literal",
                    value: "FLOOR",
                    description: "\"FLOOR\""
                },
                peg$c148 = function() {
                    return "FLOOR"
                },
                peg$c149 = "round",
                peg$c150 = {
                    type: "literal",
                    value: "ROUND",
                    description: "\"ROUND\""
                },
                peg$c151 = function() {
                    return "ROUND"
                },
                peg$c152 = "strlen",
                peg$c153 = {
                    type: "literal",
                    value: "STRLEN",
                    description: "\"STRLEN\""
                },
                peg$c154 = function() {
                    return "STRLEN"
                },
                peg$c155 = "ucase",
                peg$c156 = {
                    type: "literal",
                    value: "UCASE",
                    description: "\"UCASE\""
                },
                peg$c157 = function() {
                    return "UCASE"
                },
                peg$c158 = "lcase",
                peg$c159 = {
                    type: "literal",
                    value: "LCASE",
                    description: "\"LCASE\""
                },
                peg$c160 = function() {
                    return "LCASE"
                },
                peg$c161 = "encode_for_uri",
                peg$c162 = {
                    type: "literal",
                    value: "ENCODE_FOR_URI",
                    description: "\"ENCODE_FOR_URI\""
                },
                peg$c163 = function() {
                    return "ENCODE_FOR_URI"
                },
                peg$c164 = "year",
                peg$c165 = {
                    type: "literal",
                    value: "YEAR",
                    description: "\"YEAR\""
                },
                peg$c166 = function() {
                    return "YEAR"
                },
                peg$c167 = "month",
                peg$c168 = {
                    type: "literal",
                    value: "MONTH",
                    description: "\"MONTH\""
                },
                peg$c169 = function() {
                    return "MONTH"
                },
                peg$c170 = "day",
                peg$c171 = {
                    type: "literal",
                    value: "DAY",
                    description: "\"DAY\""
                },
                peg$c172 = function() {
                    return "DAY"
                },
                peg$c173 = "timezone",
                peg$c174 = {
                    type: "literal",
                    value: "TIMEZONE",
                    description: "\"TIMEZONE\""
                },
                peg$c175 = function() {
                    return "TIMEZONE"
                },
                peg$c176 = "tz",
                peg$c177 = {
                    type: "literal",
                    value: "TZ",
                    description: "\"TZ\""
                },
                peg$c178 = function() {
                    return "TZ"
                },
                peg$c179 = "md5",
                peg$c180 = {
                    type: "literal",
                    value: "MD5",
                    description: "\"MD5\""
                },
                peg$c181 = function() {
                    return "MD5"
                },
                peg$c182 = "sha1",
                peg$c183 = {
                    type: "literal",
                    value: "SHA1",
                    description: "\"SHA1\""
                },
                peg$c184 = function() {
                    return "SHA1"
                },
                peg$c185 = "sha256",
                peg$c186 = {
                    type: "literal",
                    value: "SHA256",
                    description: "\"SHA256\""
                },
                peg$c187 = function() {
                    return "SHA256"
                },
                peg$c188 = "sha512",
                peg$c189 = {
                    type: "literal",
                    value: "SHA512",
                    description: "\"SHA512\""
                },
                peg$c190 = function() {
                    return "SHA512"
                },
                peg$c191 = "isiri",
                peg$c192 = {
                    type: "literal",
                    value: "isIRI",
                    description: "\"isIRI\""
                },
                peg$c193 = function() {
                    return "isIRI"
                },
                peg$c194 = "isuri",
                peg$c195 = {
                    type: "literal",
                    value: "isURI",
                    description: "\"isURI\""
                },
                peg$c196 = function() {
                    return "isURI"
                },
                peg$c197 = "isblank",
                peg$c198 = {
                    type: "literal",
                    value: "isBLANK",
                    description: "\"isBLANK\""
                },
                peg$c199 = function() {
                    return "isBLANK"
                },
                peg$c200 = "datetime",
                peg$c201 = {
                    type: "literal",
                    value: "dateTime",
                    description: "\"dateTime\""
                },
                peg$c202 = function() {
                    return "dateTime"
                },
                peg$c203 = "date",
                peg$c204 = {
                    type: "literal",
                    value: "date",
                    description: "\"date\""
                },
                peg$c205 = function() {
                    return "date"
                },
                peg$c206 = "isliteral",
                peg$c207 = {
                    type: "literal",
                    value: "isLITERAL",
                    description: "\"isLITERAL\""
                },
                peg$c208 = function() {
                    return "isLITERAL"
                },
                peg$c209 = "isnumeric",
                peg$c210 = {
                    type: "literal",
                    value: "isNUMERIC",
                    description: "\"isNUMERIC\""
                },
                peg$c211 = function() {
                    return "isNUMERIC"
                },
                peg$c212 = "langmatches",
                peg$c213 = {
                    type: "literal",
                    value: "LANGMATCHES",
                    description: "\"LANGMATCHES\""
                },
                peg$c214 = function() {
                    return "LANGMATCHES"
                },
                peg$c215 = "contains",
                peg$c216 = {
                    type: "literal",
                    value: "CONTAINS",
                    description: "\"CONTAINS\""
                },
                peg$c217 = function() {
                    return "CONTAINS"
                },
                peg$c218 = "strstarts",
                peg$c219 = {
                    type: "literal",
                    value: "STRSTARTS",
                    description: "\"STRSTARTS\""
                },
                peg$c220 = function() {
                    return "STRSTARTS"
                },
                peg$c221 = "strends",
                peg$c222 = {
                    type: "literal",
                    value: "STRENDS",
                    description: "\"STRENDS\""
                },
                peg$c223 = function() {
                    return "STRENDS"
                },
                peg$c224 = "strbefore",
                peg$c225 = {
                    type: "literal",
                    value: "STRBEFORE",
                    description: "\"STRBEFORE\""
                },
                peg$c226 = function() {
                    return "STRBEFORE"
                },
                peg$c227 = "strafter",
                peg$c228 = {
                    type: "literal",
                    value: "STRAFTER",
                    description: "\"STRAFTER\""
                },
                peg$c229 = function() {
                    return "STRAFTER"
                },
                peg$c230 = "strlang",
                peg$c231 = {
                    type: "literal",
                    value: "STRLANG",
                    description: "\"STRLANG\""
                },
                peg$c232 = function() {
                    return "STRLANG"
                },
                peg$c233 = "strdt",
                peg$c234 = {
                    type: "literal",
                    value: "STRDT",
                    description: "\"STRDT\""
                },
                peg$c235 = function() {
                    return "STRDT"
                },
                peg$c236 = "sameterm",
                peg$c237 = {
                    type: "literal",
                    value: "sameTerm",
                    description: "\"sameTerm\""
                },
                peg$c238 = function() {
                    return "sameTerm"
                },
                peg$c239 = "days",
                peg$c240 = {
                    type: "literal",
                    value: "days",
                    description: "\"days\""
                },
                peg$c241 = function() {
                    return "days"
                },
                peg$c242 = "years",
                peg$c243 = {
                    type: "literal",
                    value: "years",
                    description: "\"years\""
                },
                peg$c244 = function() {
                    return "years"
                },
                peg$c245 = "months",
                peg$c246 = {
                    type: "literal",
                    value: "months",
                    description: "\"months\""
                },
                peg$c247 = function() {
                    return "months"
                },
                peg$c248 = "hours",
                peg$c249 = {
                    type: "literal",
                    value: "hours",
                    description: "\"hours\""
                },
                peg$c250 = function() {
                    return "HOURS"
                },
                peg$c251 = function() {
                    return "hours"
                },
                peg$c252 = "minutes",
                peg$c253 = {
                    type: "literal",
                    value: "minutes",
                    description: "\"minutes\""
                },
                peg$c254 = function() {
                    return "minutes"
                },
                peg$c255 = function() {
                    return "MINUTES"
                },
                peg$c256 = "seconds",
                peg$c257 = {
                    type: "literal",
                    value: "seconds",
                    description: "\"seconds\""
                },
                peg$c258 = function() {
                    return "seconds"
                },
                peg$c259 = function() {
                    return "SECONDS"
                },
                peg$c260 = "if",
                peg$c261 = {
                    type: "literal",
                    value: "IF",
                    description: "\"IF\""
                },
                peg$c262 = function() {
                    return "IF"
                },
                peg$c263 = function(Function, Expression) {
                    return {
                        Function: Function,
                        Expression: Expression
                    }
                },
                peg$c264 = function(Function, Expression1, Expression2) {
                    return {
                        Function: Function,
                        Expression1: Expression1,
                        Expression2: Expression2
                    }
                },
                peg$c265 = function(FunctionTime, PrimaryExpressionL, PrimaryExpressionR) {
                    return {
                        FunctionTime: FunctionTime,
                        PrimaryExpressionL: PrimaryExpressionL,
                        PrimaryExpressionR: PrimaryExpressionR
                    }
                },
                peg$c266 = function(Function, Expression1, Expression2, Expression3) {
                    return {
                        Function: Function,
                        Expression1: Expression1,
                        Expression2: Expression2,
                        Expression3: Expression3
                    }
                },
                peg$c267 = "HASMAX",
                peg$c268 = {
                    type: "literal",
                    value: "HASMAX",
                    description: "\"HASMAX\""
                },
                peg$c269 = function(HASMAX, SpecialExpression) {
                    return {
                        Function: HASMAX,
                        SpecialExpression: SpecialExpression
                    }
                },
                peg$c270 = "HASRANK",
                peg$c271 = {
                    type: "literal",
                    value: "HASRANK",
                    description: "\"HASRANK\""
                },
                peg$c272 = function(HASRANK, SpecialExpression) {
                    return {
                        Function: HASRANK,
                        SpecialExpression: SpecialExpression
                    }
                },
                peg$c273 = "DESC",
                peg$c274 = {
                    type: "literal",
                    value: "DESC",
                    description: "\"DESC\""
                },
                peg$c275 = "|",
                peg$c276 = {
                    type: "literal",
                    value: "|",
                    description: "\"|\""
                },
                peg$c277 = "GLOBAL",
                peg$c278 = {
                    type: "literal",
                    value: "GLOBAL",
                    description: "\"GLOBAL\""
                },
                peg$c279 = "FOR",
                peg$c280 = {
                    type: "literal",
                    value: "FOR",
                    description: "\"FOR\""
                },
                peg$c281 = "BY",
                peg$c282 = {
                    type: "literal",
                    value: "BY",
                    description: "\"BY\""
                },
                peg$c283 = "WHERE",
                peg$c284 = {
                    type: "literal",
                    value: "WHERE",
                    description: "\"WHERE\""
                },
                peg$c285 = function(RegexExpression) {
                    return {
                        RegexExpression: RegexExpression
                    }
                },
                peg$c286 = "regex",
                peg$c287 = {
                    type: "literal",
                    value: "REGEX",
                    description: "\"REGEX\""
                },
                peg$c288 = function() {
                    return "REGEX"
                },
                peg$c289 = "substring",
                peg$c290 = {
                    type: "literal",
                    value: "SUBSTRING",
                    description: "\"SUBSTRING\""
                },
                peg$c291 = function() {
                    return "SUBSTRING"
                },
                peg$c292 = "substr",
                peg$c293 = {
                    type: "literal",
                    value: "SUBSTR",
                    description: "\"SUBSTR\""
                },
                peg$c294 = function() {
                    return "SUBSTR"
                },
                peg$c295 = "bif:substring",
                peg$c296 = {
                    type: "literal",
                    value: "bif:SUBSTRING",
                    description: "\"bif:SUBSTRING\""
                },
                peg$c297 = function() {
                    return "bif:SUBSTRING"
                },
                peg$c298 = "bif:substr",
                peg$c299 = {
                    type: "literal",
                    value: "bif:SUBSTR",
                    description: "\"bif:SUBSTR\""
                },
                peg$c300 = function() {
                    return "bif:SUBSTR"
                },
                peg$c301 = "replace",
                peg$c302 = {
                    type: "literal",
                    value: "REPLACE",
                    description: "\"REPLACE\""
                },
                peg$c303 = function() {
                    return "REPLACE"
                },
                peg$c304 = "exists",
                peg$c305 = {
                    type: "literal",
                    value: "EXISTS",
                    description: "\"EXISTS\""
                },
                peg$c306 = function() {
                    return "EXISTS"
                },
                peg$c307 = function(SubstringExpression) {
                    return {
                        SubstringExpression: SubstringExpression
                    }
                },
                peg$c308 = function(Expression1, Expression2, Expression3) {
                    return {
                        Expression1: Expression1,
                        Expression2: Expression2,
                        Expression3: Expression3
                    }
                },
                peg$c309 = function(Expression1, Expression2) {
                    return {
                        Expression1: Expression1,
                        Expression2: Expression2
                    }
                },
                peg$c310 = function(SubstringBifExpression) {
                    return {
                        SubstringBifExpression: SubstringBifExpression
                    }
                },
                peg$c311 = function(StrReplaceExpression) {
                    return {
                        StrReplaceExpression: StrReplaceExpression
                    }
                },
                peg$c312 = function(ExistsFunc) {
                    return {
                        ExistsFunc: ExistsFunc
                    }
                },
                peg$c313 = function(Expression) {
                    return {
                        Expression: Expression
                    }
                },
                peg$c314 = function(NotExistsFunc) {
                    return {
                        NotExistsFunc: NotExistsFunc
                    }
                },
                peg$c315 = function(Comma) {
                    return {
                        Comma: Comma
                    }
                },
                peg$c316 = "@",
                peg$c317 = {
                    type: "literal",
                    value: "@",
                    description: "\"@\""
                },
                peg$c318 = function(String) {
                    return {
                        String: makeVar(String)
                    }
                },
                peg$c319 = "<",
                peg$c320 = {
                    type: "literal",
                    value: "<",
                    description: "\"<\""
                },
                peg$c321 = /^[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]/,
                peg$c322 = {
                    type: "class",
                    value: "[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]",
                    description: "[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]"
                },
                peg$c323 = "_",
                peg$c324 = {
                    type: "literal",
                    value: "_",
                    description: "\"_\""
                },
                peg$c325 = ":",
                peg$c326 = {
                    type: "literal",
                    value: ":",
                    description: "\":\""
                },
                peg$c327 = "#",
                peg$c328 = {
                    type: "literal",
                    value: "#",
                    description: "\"#\""
                },
                peg$c329 = /^[0-9]/,
                peg$c330 = {
                    type: "class",
                    value: "[0-9]",
                    description: "[0-9]"
                },
                peg$c331 = ">",
                peg$c332 = {
                    type: "literal",
                    value: ">",
                    description: "\">\""
                },
                peg$c333 = function(IRIREF) {
                    return {
                        IRIREF: IRIREF
                    }
                },
                peg$c334 = function(PrefixedName) {
                    return {
                        PrefixedName: PrefixedName
                    }
                },
                peg$c335 = function(Prefix) {
                    return makeVar(Prefix)
                },
                peg$c336 = function(LName, Substring, FunctionBETWEEN, FunctionLike) {
                    return {
                        var: {
                            name: makeVar(LName),
                            type: resolveType(makeVar(LName)),
                            kind: resolveKind(makeVar(LName))
                        },
                        Substring: makeVar(Substring),
                        FunctionBETWEEN: FunctionBETWEEN,
                        FunctionLike: FunctionLike
                    }
                },
                peg$c337 = function(Var) {
                    return makeVar(Var)
                },
                peg$c338 = function(iri, ArgList) {
                    return {
                        iri: iri,
                        ArgList: ArgList
                    }
                },
                peg$c339 = function(iri) {
                    return {
                        iri: iri
                    }
                },
                peg$c340 = function(DISTINCT, ArgListExpression) {
                    return {
                        DISTINCT: DISTINCT,
                        ArgListExpression: ArgListExpression
                    }
                },
                peg$c341 = function(ArgListExpression) {
                    return {
                        ArgListExpression: ArgListExpression
                    }
                },
                peg$c342 = function() {
                    return
                },
                peg$c343 = function(NumericLiteral) {
                    return {
                        NumericLiteral: NumericLiteral
                    }
                },
                peg$c344 = function(DECIMAL) {
                    return {
                        Number: DECIMAL.join("")
                    }
                },
                peg$c345 = /^[eE]/,
                peg$c346 = {
                    type: "class",
                    value: "[eE]",
                    description: "[eE]"
                },
                peg$c347 = /^[+\-]/,
                peg$c348 = {
                    type: "class",
                    value: "[+-]",
                    description: "[+-]"
                },
                peg$c349 = function(DOUBLE) {
                    return {
                        Number: DOUBLE.join("")
                    }
                },
                peg$c350 = function(INTEGER) {
                    return {
                        Number: INTEGER.join("")
                    }
                },
                peg$c351 = function(Number) {
                    return {
                        Number: Number.join("")
                    }
                },
                peg$c352 = function(Var) {
                    return {
                        VariableName: makeVar(Var)
                    }
                },
                peg$c353 = "?",
                peg$c354 = {
                    type: "literal",
                    value: "?",
                    description: "\"?\""
                },
                peg$c355 = "$",
                peg$c356 = {
                    type: "literal",
                    value: "$",
                    description: "\"$\""
                },
                peg$c357 = "'",
                peg$c358 = {
                    type: "literal",
                    value: "'",
                    description: "\"'\""
                },
                peg$c359 = "\"",
                peg$c360 = {
                    type: "literal",
                    value: "\"",
                    description: "\"\\\"\""
                },
                peg$c361 = function(QNameB) {
                    return pathOrReference(QNameB)
                },
                peg$c362 = function(Path, PrimaryExpression, FunctionBETWEEN, FunctionLike) {
                    return {
                        Path: Path,
                        PrimaryExpression: PrimaryExpression,
                        FunctionBETWEEN: FunctionBETWEEN,
                        FunctionLike: FunctionLike
                    }
                },
                peg$c363 = function(path2) {
                    return {
                        path: path2
                    }
                },
                peg$c364 = "INV(",
                peg$c365 = {
                    type: "literal",
                    value: "INV(",
                    description: "\"INV(\""
                },
                peg$c366 = function(Chars_String) {
                    return {
                        inv: "^",
                        name: (makeVar(Chars_String)),
                        type: resolveTypeFromSchemaForAttributeAndLink(makeVar(Chars_String))
                    }
                },
                peg$c367 = "^",
                peg$c368 = {
                    type: "literal",
                    value: "^",
                    description: "\"^\""
                },
                peg$c369 = function(Chars_String) {
                    return {
                        name: makeVar(Chars_String),
                        type: resolveTypeFromSchemaForAttributeAndLink(makeVar(Chars_String))
                    }
                },
                peg$c370 = "[",
                peg$c371 = {
                    type: "literal",
                    value: "[",
                    description: "\"[\""
                },
                peg$c372 = "]",
                peg$c373 = {
                    type: "literal",
                    value: "]",
                    description: "\"]\""
                },
                peg$c374 = function(LName, Substring) {
                    return {
                        var: {
                            name: makeVar(LName),
                            type: resolveTypeFromSchemaForAttributeAndLink(makeVar(LName))
                        },
                        Substring: makeVar(Substring)
                    }
                },
                peg$c375 = "INV",
                peg$c376 = {
                    type: "literal",
                    value: "INV",
                    description: "\"INV\""
                },
                peg$c377 = function(INV, LName, FunctionBETWEEN, FunctionLike) {
                    return {
                        INV: INV,
                        var: makeVar(LName),
                        FunctionBETWEEN: FunctionBETWEEN,
                        FunctionLike: FunctionLike
                    }
                },
                peg$c378 = "!=",
                peg$c379 = {
                    type: "literal",
                    value: "!=",
                    description: "\"!=\""
                },
                peg$c380 = "<>",
                peg$c381 = {
                    type: "literal",
                    value: "<>",
                    description: "\"<>\""
                },
                peg$c382 = "<=",
                peg$c383 = {
                    type: "literal",
                    value: "<=",
                    description: "\"<=\""
                },
                peg$c384 = ">=",
                peg$c385 = {
                    type: "literal",
                    value: ">=",
                    description: "\">=\""
                },
                peg$c386 = " ",
                peg$c387 = {
                    type: "literal",
                    value: " ",
                    description: "\" \""
                },
                peg$c388 = function() {
                    return
                },
                peg$c389 = /^[\-_.:, \^$]/,
                peg$c390 = {
                    type: "class",
                    value: "[-_.:, ^$]",
                    description: "[-_.:, ^$]"
                },
                peg$c391 = function(string) {
                    return {
                        string: string.join("")
                    }
                },
                peg$c392 = "like",
                peg$c393 = {
                    type: "literal",
                    value: "LIKE",
                    description: "\"LIKE\""
                },
                peg$c394 = function(string) {
                    return string
                },
                peg$c395 = "%",
                peg$c396 = {
                    type: "literal",
                    value: "%",
                    description: "\"%\""
                },
                peg$c397 = function(start, string, end) {
                    return {
                        string: makeVar(string),
                        start: start,
                        end: end
                    }
                },
                peg$c398 = "between",
                peg$c399 = {
                    type: "literal",
                    value: "BETWEEN",
                    description: "\"BETWEEN\""
                },
                peg$c400 = function(BetweenExpressionL, BetweenExpressionR) {
                    return {
                        BetweenExpressionL: BetweenExpressionL,
                        BetweenExpressionR: BetweenExpressionR
                    }
                },

                peg$currPos = 0,
                peg$savedPos = 0,
                peg$posDetailsCache = [{
                    line: 1,
                    column: 1,
                    seenCR: false
                }],
                peg$maxFailPos = 0,
                peg$maxFailExpected = [],
                peg$silentFails = 0,

                peg$result;

            if ("startRule" in options) {
                if (!(options.startRule in peg$startRuleFunctions)) {
                    throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
                }

                peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
            }

            function text() {
                return input.substring(peg$savedPos, peg$currPos);
            }

            function location() {
                return peg$computeLocation(peg$savedPos, peg$currPos);
            }

            function expected(description) {
                throw peg$buildException(
                    null, [{
                        type: "other",
                        description: description
                    }],
                    input.substring(peg$savedPos, peg$currPos),
                    peg$computeLocation(peg$savedPos, peg$currPos)
                );
            }

            function error(message) {
                throw peg$buildException(
                    message,
                    null,
                    input.substring(peg$savedPos, peg$currPos),
                    peg$computeLocation(peg$savedPos, peg$currPos)
                );
            }

            function peg$computePosDetails(pos) {
                var details = peg$posDetailsCache[pos],
                    p, ch;

                if (details) {
                    return details;
                } else {
                    p = pos - 1;
                    while (!peg$posDetailsCache[p]) {
                        p--;
                    }

                    details = peg$posDetailsCache[p];
                    details = {
                        line: details.line,
                        column: details.column,
                        seenCR: details.seenCR
                    };

                    while (p < pos) {
                        ch = input.charAt(p);
                        if (ch === "\n") {
                            if (!details.seenCR) {
                                details.line++;
                            }
                            details.column = 1;
                            details.seenCR = false;
                        } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                            details.line++;
                            details.column = 1;
                            details.seenCR = true;
                        } else {
                            details.column++;
                            details.seenCR = false;
                        }

                        p++;
                    }

                    peg$posDetailsCache[pos] = details;
                    return details;
                }
            }

            function peg$computeLocation(startPos, endPos) {
                var startPosDetails = peg$computePosDetails(startPos),
                    endPosDetails = peg$computePosDetails(endPos);

                return {
                    start: {
                        offset: startPos,
                        line: startPosDetails.line,
                        column: startPosDetails.column
                    },
                    end: {
                        offset: endPos,
                        line: endPosDetails.line,
                        column: endPosDetails.column
                    }
                };
            }

            function peg$fail(expected) {
                if (peg$currPos < peg$maxFailPos) {
                    return;
                }

                if (peg$currPos > peg$maxFailPos) {
                    peg$maxFailPos = peg$currPos;
                    peg$maxFailExpected = [];
                }

                peg$maxFailExpected.push(expected);
            }

            function peg$buildException(message, expected, found, location) {
                function cleanupExpected(expected) {
                    var i = 1;

                    expected.sort(function(a, b) {
                        if (a.description < b.description) {
                            return -1;
                        } else if (a.description > b.description) {
                            return 1;
                        } else {
                            return 0;
                        }
                    });

                    while (i < expected.length) {
                        if (expected[i - 1] === expected[i]) {
                            expected.splice(i, 1);
                        } else {
                            i++;
                        }
                    }
                }

                function buildMessage(expected, found) {
                    function stringEscape(s) {
                        function hex(ch) {
                            return ch.charCodeAt(0).toString(16).toUpperCase();
                        }

                        return s
                            .replace(/\\/g, '\\\\')
                            .replace(/"/g, '\\"')
                            .replace(/\x08/g, '\\b')
                            .replace(/\t/g, '\\t')
                            .replace(/\n/g, '\\n')
                            .replace(/\f/g, '\\f')
                            .replace(/\r/g, '\\r')
                            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) {
                                return '\\x0' + hex(ch);
                            })
                            .replace(/[\x10-\x1F\x80-\xFF]/g, function(ch) {
                                return '\\x' + hex(ch);
                            })
                            .replace(/[\u0100-\u0FFF]/g, function(ch) {
                                return '\\u0' + hex(ch);
                            })
                            .replace(/[\u1000-\uFFFF]/g, function(ch) {
                                return '\\u' + hex(ch);
                            });
                    }

                    var expectedDescs = new Array(expected.length),
                        expectedDesc, foundDesc, i;

                    for (i = 0; i < expected.length; i++) {
                        expectedDescs[i] = expected[i].description;
                    }

                    expectedDesc = expected.length > 1 ?
                        expectedDescs.slice(0, -1).join(", ") +
                        " or " +
                        expectedDescs[expected.length - 1] :
                        expectedDescs[0];

                    foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

                    return "Expected " + expectedDesc + " but " + foundDesc + " found.";
                }

                if (expected !== null) {
                    cleanupExpected(expected);
                }

                return new peg$SyntaxError(
                    message !== null ? message : buildMessage(expected, found),
                    expected,
                    found,
                    location
                );
            }

            function peg$parseMain() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parsespace();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseExpression();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseExpression() {
                var s0;

                if (input.substr(peg$currPos, 3) === peg$c0) {
                    s0 = peg$c0;
                    peg$currPos += 3;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c1);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c2) {
                        s0 = peg$c2;
                        peg$currPos += 5;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c3);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 10) === peg$c4) {
                            s0 = peg$c4;
                            peg$currPos += 10;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c5);
                            }
                        }
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseclassExpr();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseValueScope();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseConditionalOrExpressionA();
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseValueScope() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseValueScopeA();
                    if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$parseNumericLiteral();
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$currPos;
                            s6 = peg$parseComma();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parsespace();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseNumericLiteral();
                                    if (s8 !== peg$FAILED) {
                                        s6 = [s6, s7, s8];
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$currPos;
                                s6 = peg$parseComma();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsespace();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parseNumericLiteral();
                                        if (s8 !== peg$FAILED) {
                                            s6 = [s6, s7, s8];
                                            s5 = s6;
                                        } else {
                                            peg$currPos = s5;
                                            s5 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                s3 = [s3, s4];
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                            s3 = peg$c8;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c9);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c10(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseValueScopeA() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseINTEGER();
                if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c11) {
                        s2 = peg$c11;
                        peg$currPos += 2;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c12);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseINTEGER();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c13(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseclassExpr() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 46) {
                    s1 = peg$c14;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c15);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c16) {
                        s1 = peg$c16;
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c17);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c18();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseConditionalOrExpressionA() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseConditionalOrExpression();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c19(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseConditionalOrExpression() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                s0 = peg$currPos;
                s1 = peg$parseConditionalAndExpression();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsespace();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseOROriginal();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsespace();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseConditionalAndExpression();
                                if (s7 !== peg$FAILED) {
                                    s4 = [s4, s5, s6, s7];
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsespace();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseOROriginal();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsespace();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseConditionalAndExpression();
                                    if (s7 !== peg$FAILED) {
                                        s4 = [s4, s5, s6, s7];
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseOROriginal() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c20) {
                    s1 = peg$c20;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c21);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c22) {
                        s1 = input.substr(peg$currPos, 2);
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c23);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c24(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseConditionalAndExpression() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseValueLogicalA();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c25(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseValueLogicalA() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                s0 = peg$currPos;
                s1 = peg$parseValueLogical();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parsespace();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseANDOriginal();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsespace();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseValueLogical();
                                if (s7 !== peg$FAILED) {
                                    s4 = [s4, s5, s6, s7];
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parsespace();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseANDOriginal();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsespace();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseValueLogical();
                                    if (s7 !== peg$FAILED) {
                                        s4 = [s4, s5, s6, s7];
                                        s3 = s4;
                                    } else {
                                        peg$currPos = s3;
                                        s3 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseANDOriginal() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c26) {
                    s1 = peg$c26;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c27);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c28) {
                        s1 = input.substr(peg$currPos, 3);
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c29);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c30(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseValueLogical() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseRelationalExpression();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c31(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseRelationalExpression() {
                var s0;

                s0 = peg$parseRelationalExpressionC();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseRelationalExpressionC1();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseRelationalExpressionB1();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseRelationalExpressionB2();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseRelationalExpressionB();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseRelationalExpressionA();
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseRelationalExpressionA() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseNumericExpression();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c32(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseRelationalExpressionB() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseNumericExpression();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsespace();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseRelation();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsespace();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseNumericExpression();
                                if (s6 !== peg$FAILED) {
                                    s3 = [s3, s4, s5, s6];
                                    s2 = s3;
                                } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c33(s1, s4, s6);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseRelationalExpressionB1() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseclassExpr();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsespace();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseRelation();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsespace();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseNumericExpression();
                                if (s6 !== peg$FAILED) {
                                    s3 = [s3, s4, s5, s6];
                                    s2 = s3;
                                } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c34(s1, s4, s6);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseRelationalExpressionB2() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseNumericExpression();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsespace();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseRelation();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsespace();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseclassExpr();
                                if (s6 !== peg$FAILED) {
                                    s3 = [s3, s4, s5, s6];
                                    s2 = s3;
                                } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c35(s1, s4, s6);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseRelationalExpressionC() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseNumericExpression();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsespace();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseIN();
                        if (s4 === peg$FAILED) {
                            s4 = peg$parseNOTIN();
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsespace();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseExpressionList2();
                                if (s6 !== peg$FAILED) {
                                    s3 = [s3, s4, s5, s6];
                                    s2 = s3;
                                } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c36(s1, s4, s6);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseRelationalExpressionC1() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseNumericExpression();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsespace();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseIN();
                        if (s4 === peg$FAILED) {
                            s4 = peg$parseNOTIN();
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsespace();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseExpressionList3();
                                if (s6 === peg$FAILED) {
                                    s6 = peg$parseExpressionList4();
                                }
                                if (s6 !== peg$FAILED) {
                                    s3 = [s3, s4, s5, s6];
                                    s2 = s3;
                                } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c36(s1, s4, s6);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseIN() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c37) {
                    s1 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c38);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c39();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseNOT() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c40) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c41);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c42();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseNOTIN() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$currPos;
                s2 = peg$parseNOT();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsespace();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseIN();
                        if (s4 !== peg$FAILED) {
                            s2 = [s2, s3, s4];
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c43(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseNumericExpression() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseAdditiveExpression();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c44(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseAdditiveExpression() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = peg$parseMultiplicativeExpression();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseMultiplicativeExpressionListA();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c45(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseMultiplicativeExpressionListA() {
                var s0, s1;

                s0 = [];
                s1 = peg$parseMultiplicativeExpressionList();
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$parseMultiplicativeExpressionList();
                }

                return s0;
            }

            function peg$parseMultiplicativeExpressionList() {
                var s0;

                s0 = peg$parseConcat();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseAdditive();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseNumericLiteralPositive();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseNumericLiteralNegative();
                        }
                    }
                }

                return s0;
            }

            function peg$parseConcat() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parsespace();
                if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c46) {
                        s2 = peg$c46;
                        peg$currPos += 2;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c47);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseMultiplicativeExpression();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c48(s2, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseAdditive() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parsespace();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 43) {
                        s2 = peg$c49;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c50);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 45) {
                            s2 = peg$c51;
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c52);
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseMultiplicativeExpression();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c53(s2, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseMultiplicativeExpression() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parseUnaryExpression();
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parsespace();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseUnaryExpressionListA();
                        if (s4 !== peg$FAILED) {
                            s3 = [s3, s4];
                            s2 = s3;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c54(s1, s4);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseUnaryExpression() {
                var s0;

                s0 = peg$parseUnaryExpressionA();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseUnaryExpressionB();
                }

                return s0;
            }

            function peg$parseUnaryExpressionA() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parsespace();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 33) {
                        s2 = peg$c55;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c56);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 45) {
                            s2 = peg$c51;
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c52);
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsePrimaryExpression();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c57(s2, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseUnaryExpressionB() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = peg$parsespace();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsePrimaryExpression();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c58(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseUnaryExpressionListA() {
                var s0, s1;

                s0 = [];
                s1 = peg$parseUnaryExpressionList();
                while (s1 !== peg$FAILED) {
                    s0.push(s1);
                    s1 = peg$parseUnaryExpressionList();
                }

                return s0;
            }

            function peg$parseUnaryExpressionList() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$parsespace();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                        s2 = peg$c59;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c60);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 47) {
                            s2 = peg$c61;
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c62);
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseUnaryExpression();
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c63(s2, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsePrimaryExpression() {
                var s0;

                s0 = peg$parseBooleanLiteral();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseBuiltInCall();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseRDFLiteral();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseBrackettedExpression();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseiriOrFunction();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseNumericLiteral();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parseVar();
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$parseQName();
                                            if (s0 === peg$FAILED) {
                                                s0 = peg$parseLN();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parsePrimaryExpression2() {
                var s0;

                s0 = peg$parseBooleanLiteral();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseBuiltInCall();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseRDFLiteral();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseBrackettedExpression();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseiriOrFunction();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseNumericLiteral();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parseVar();
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$parseLName2();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseBooleanLiteral() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseTRUE();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseFALSE();
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c64(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseTRUE() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c65) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c66);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c67();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseFALSE() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c68) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c69);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c70();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseRDFLiteral() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseRDFLiteralA();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseRDFLiteralB();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseRDFLiteralC();
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c71(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseRDFLiteralA() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = peg$parseStringQuotes();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseLANGTAG();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c72(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseRDFLiteralB() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseStringQuotes();
                if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c73) {
                        s2 = peg$c73;
                        peg$currPos += 2;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c74);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseiri();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c75(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseBrackettedExpression() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c76;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c77);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseExpression();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c78;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c79);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c80(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseBuiltInCall() {
                var s0;

                s0 = peg$parseAggregate();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseFunctionExpression();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseHASMAX();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseHASRANK();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseRegexExpression();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseSubstringExpression();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parseSubstringBifExpression();
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$parseStrReplaceExpression();
                                            if (s0 === peg$FAILED) {
                                                s0 = peg$parseExistsFunc();
                                                if (s0 === peg$FAILED) {
                                                    s0 = peg$parseNotExistsFunc();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parseAggregate() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseAggregateAO();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseAggregateA();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseAggregateB();
                        if (s1 === peg$FAILED) {
                            s1 = peg$parseAggregateC();
                            if (s1 === peg$FAILED) {
                                s1 = peg$parseAggregateD();
                                if (s1 === peg$FAILED) {
                                    s1 = peg$parseAggregateE();
                                    if (s1 === peg$FAILED) {
                                        s1 = peg$parseAggregateF();
                                    }
                                }
                            }
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c81(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseAggregateAO() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseCOUNT_DISTINCT();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c78;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c79);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c82(s1, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseAggregateA() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                s0 = peg$currPos;
                s1 = peg$parseCOUNT();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseSUM();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseMIN();
                        if (s1 === peg$FAILED) {
                            s1 = peg$parseMAX();
                            if (s1 === peg$FAILED) {
                                s1 = peg$parseAVG();
                                if (s1 === peg$FAILED) {
                                    s1 = peg$parseSAMPLE();
                                }
                            }
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseDISTINCT();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseExpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsespace();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c78;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c79);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c83(s1, s3, s5);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseAggregateB() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseCOUNT();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseSUM();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseMIN();
                        if (s1 === peg$FAILED) {
                            s1 = peg$parseMAX();
                            if (s1 === peg$FAILED) {
                                s1 = peg$parseAVG();
                                if (s1 === peg$FAILED) {
                                    s1 = peg$parseSAMPLE();
                                }
                            }
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c78;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c79);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c84(s1, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseAggregateC() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                s1 = peg$parseGROUP_CONCAT();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseDISTINCT();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseExpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsespace();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseSEPARATOR();
                                        if (s7 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                                s8 = peg$c78;
                                                peg$currPos++;
                                            } else {
                                                s8 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c79);
                                                }
                                            }
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c85(s1, s3, s5, s7);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseAggregateD() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                s0 = peg$currPos;
                s1 = peg$parseGROUP_CONCAT();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseSEPARATOR();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c78;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c79);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c86(s1, s4, s6);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseAggregateE() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                s0 = peg$currPos;
                s1 = peg$parseGROUP_CONCAT();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseDISTINCT();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseExpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsespace();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c78;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c79);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c83(s1, s3, s5);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseAggregateF() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseGROUP_CONCAT();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c78;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c79);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c84(s1, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseCOUNT_DISTINCT() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 14).toLowerCase() === peg$c87) {
                    s1 = input.substr(peg$currPos, 14);
                    peg$currPos += 14;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c88);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c89();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseDISTINCT() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c90) {
                    s1 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c91);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c92();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseCOUNT() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c93) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c94);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c95();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSUM() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c96) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c97);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c98();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseMIN() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c99) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c100);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c101();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseMAX() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c102) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c103);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c104();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseAVG() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c105) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c106);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c107();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSAMPLE() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c108) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c109);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c110();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseGROUP_CONCAT() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 12).toLowerCase() === peg$c111) {
                    s1 = input.substr(peg$currPos, 12);
                    peg$currPos += 12;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c112);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c113();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSEPARATORTer() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c114) {
                    s1 = input.substr(peg$currPos, 9);
                    peg$currPos += 9;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c115);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c116();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSEPARATOR() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 59) {
                    s1 = peg$c117;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c118);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseSEPARATORTer();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 61) {
                                    s5 = peg$c119;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c120);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseStringQuotes();
                                    if (s6 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6];
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s1 = peg$c121;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c122);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsespace();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseStringQuotes();
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c123(s1, s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                return s0;
            }

            function peg$parseFunctionExpression() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseFunctionExpressionC();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseFunctionExpressionA();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseFunctionExpressionB();
                        if (s1 === peg$FAILED) {
                            s1 = peg$parseIFFunction();
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c124(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSTR() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c125) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c126);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c127();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseLANG() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c128) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c129);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c130();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseDATATYPE() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c131) {
                    s1 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c132);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c133();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseIRI() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c134) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c135);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c136();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseURI() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c137) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c138);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c139();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseABS() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c140) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c141);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c142();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseCEIL() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c143) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c144);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c145();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseFLOOR() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c146) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c147);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c148();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseROUND() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c149) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c150);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c151();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSTRLEN() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c152) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c153);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c154();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseUCASE() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c155) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c156);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c157();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseLCASE() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c158) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c159);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c160();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseENCODE_FOR_URI() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 14).toLowerCase() === peg$c161) {
                    s1 = input.substr(peg$currPos, 14);
                    peg$currPos += 14;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c162);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c163();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseYEAR() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c164) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c165);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c166();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseMONTH() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c167) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c168);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c169();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseDAY() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c170) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c171);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c172();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseTIMEZONE() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c173) {
                    s1 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c174);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c175();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseTZ() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c176) {
                    s1 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c177);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c178();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseMD5() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c179) {
                    s1 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c180);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c181();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSHA1() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c182) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c183);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c184();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSHA256() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c185) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c186);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c187();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSHA512() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c188) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c189);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c190();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseisIRI() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c191) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c192);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c193();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseisURI() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c194) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c195);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c196();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseisBLANK() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c197) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c198);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c199();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsedateTime() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c200) {
                    s1 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c201);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c202();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsedate() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c203) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c204);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c205();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseisLITERAL() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c206) {
                    s1 = input.substr(peg$currPos, 9);
                    peg$currPos += 9;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c207);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c208();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseisNUMERIC() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c209) {
                    s1 = input.substr(peg$currPos, 9);
                    peg$currPos += 9;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c210);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c211();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseLANGMATCHES() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 11).toLowerCase() === peg$c212) {
                    s1 = input.substr(peg$currPos, 11);
                    peg$currPos += 11;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c213);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c214();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseCONTAINS() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c215) {
                    s1 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c216);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c217();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSTRSTARTS() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c218) {
                    s1 = input.substr(peg$currPos, 9);
                    peg$currPos += 9;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c219);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c220();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSTRENDS() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c221) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c222);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c223();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSTRBEFORE() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c224) {
                    s1 = input.substr(peg$currPos, 9);
                    peg$currPos += 9;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c225);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c226();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSTRAFTER() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c227) {
                    s1 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c228);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c229();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSTRLANG() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c230) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c231);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c232();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSTRDT() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c233) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c234);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c235();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsesameTerm() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c236) {
                    s1 = input.substr(peg$currPos, 8);
                    peg$currPos += 8;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c237);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c238();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsedays() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c239) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c240);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c241();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseyears() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c242) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c243);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c244();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsemonths() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c245) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c246);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c247();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseHOURS2() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c248) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c249);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c250();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsehours() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c248) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c249);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c251();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseminutes() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c252) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c253);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c254();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseMINUTES2() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c252) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c253);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c255();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseseconds() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c256) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c257);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c258();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSECONDS2() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c256) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c257);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c259();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseIF() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c260) {
                    s1 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c261);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c262();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseFunctionExpressionA() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseSTR();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseLANG();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseDATATYPE();
                        if (s1 === peg$FAILED) {
                            s1 = peg$parseIRI();
                            if (s1 === peg$FAILED) {
                                s1 = peg$parseURI();
                                if (s1 === peg$FAILED) {
                                    s1 = peg$parseABS();
                                    if (s1 === peg$FAILED) {
                                        s1 = peg$parseCEIL();
                                        if (s1 === peg$FAILED) {
                                            s1 = peg$parseFLOOR();
                                            if (s1 === peg$FAILED) {
                                                s1 = peg$parseROUND();
                                                if (s1 === peg$FAILED) {
                                                    s1 = peg$parseSTRLEN();
                                                    if (s1 === peg$FAILED) {
                                                        s1 = peg$parseUCASE();
                                                        if (s1 === peg$FAILED) {
                                                            s1 = peg$parseLCASE();
                                                            if (s1 === peg$FAILED) {
                                                                s1 = peg$parseENCODE_FOR_URI();
                                                                if (s1 === peg$FAILED) {
                                                                    s1 = peg$parseYEAR();
                                                                    if (s1 === peg$FAILED) {
                                                                        s1 = peg$parseMONTH();
                                                                        if (s1 === peg$FAILED) {
                                                                            s1 = peg$parseDAY();
                                                                            if (s1 === peg$FAILED) {
                                                                                s1 = peg$parseHOURS2();
                                                                                if (s1 === peg$FAILED) {
                                                                                    s1 = peg$parseMINUTES2();
                                                                                    if (s1 === peg$FAILED) {
                                                                                        s1 = peg$parseSECONDS2();
                                                                                        if (s1 === peg$FAILED) {
                                                                                            s1 = peg$parseTIMEZONE();
                                                                                            if (s1 === peg$FAILED) {
                                                                                                s1 = peg$parseTZ();
                                                                                                if (s1 === peg$FAILED) {
                                                                                                    s1 = peg$parseMD5();
                                                                                                    if (s1 === peg$FAILED) {
                                                                                                        s1 = peg$parseSHA1();
                                                                                                        if (s1 === peg$FAILED) {
                                                                                                            s1 = peg$parseSHA256();
                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                s1 = peg$parseSHA512();
                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                    s1 = peg$parseisIRI();
                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                        s1 = peg$parseisURI();
                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                            s1 = peg$parseisBLANK();
                                                                                                                            if (s1 === peg$FAILED) {
                                                                                                                                s1 = peg$parsedateTime();
                                                                                                                                if (s1 === peg$FAILED) {
                                                                                                                                    s1 = peg$parsedate();
                                                                                                                                    if (s1 === peg$FAILED) {
                                                                                                                                        s1 = peg$parseisLITERAL();
                                                                                                                                        if (s1 === peg$FAILED) {
                                                                                                                                            s1 = peg$parseisNUMERIC();
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c78;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c79);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c263(s1, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseFunctionExpressionB() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

                s0 = peg$currPos;
                s1 = peg$parseLANGMATCHES();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseCONTAINS();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseSTRSTARTS();
                        if (s1 === peg$FAILED) {
                            s1 = peg$parseSTRENDS();
                            if (s1 === peg$FAILED) {
                                s1 = peg$parseSTRBEFORE();
                                if (s1 === peg$FAILED) {
                                    s1 = peg$parseSTRAFTER();
                                    if (s1 === peg$FAILED) {
                                        s1 = peg$parseSTRLANG();
                                        if (s1 === peg$FAILED) {
                                            s1 = peg$parseSTRDT();
                                            if (s1 === peg$FAILED) {
                                                s1 = peg$parsesameTerm();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                        s6 = peg$c121;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c122);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseExpression();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsespace();
                                                if (s9 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                        s10 = peg$c78;
                                                        peg$currPos++;
                                                    } else {
                                                        s10 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c79);
                                                        }
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c264(s1, s4, s8);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseFunctionExpressionC() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

                s0 = peg$currPos;
                s1 = peg$parsedays();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseyears();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parsemonths();
                        if (s1 === peg$FAILED) {
                            s1 = peg$parsehours();
                            if (s1 === peg$FAILED) {
                                s1 = peg$parseminutes();
                                if (s1 === peg$FAILED) {
                                    s1 = peg$parseseconds();
                                }
                            }
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsePrimaryExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 45) {
                                        s6 = peg$c51;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c52);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsePrimaryExpression();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsespace();
                                                if (s9 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                        s10 = peg$c78;
                                                        peg$currPos++;
                                                    } else {
                                                        s10 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c79);
                                                        }
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c265(s1, s4, s8);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseIFFunction() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

                s0 = peg$currPos;
                s1 = peg$parseIF();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                        s6 = peg$c121;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c122);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseExpression();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsespace();
                                                if (s9 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 44) {
                                                        s10 = peg$c121;
                                                        peg$currPos++;
                                                    } else {
                                                        s10 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c122);
                                                        }
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parsespace();
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parseExpression();
                                                            if (s12 !== peg$FAILED) {
                                                                s13 = peg$parsespace();
                                                                if (s13 !== peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                                        s14 = peg$c78;
                                                                        peg$currPos++;
                                                                    } else {
                                                                        s14 = peg$FAILED;
                                                                        if (peg$silentFails === 0) {
                                                                            peg$fail(peg$c79);
                                                                        }
                                                                    }
                                                                    if (s14 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$c266(s1, s4, s8, s12);
                                                                        s0 = s1;
                                                                    } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseHASMAX() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6) === peg$c267) {
                    s1 = peg$c267;
                    peg$currPos += 6;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c268);
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseSpecialExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c78;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c79);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c269(s1, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseHASRANK() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7) === peg$c270) {
                    s1 = peg$c270;
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c271);
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseSpecialExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c78;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c79);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c272(s1, s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseSpecialExpression() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

                s0 = peg$currPos;
                s1 = peg$parsePrimaryExpression();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c273) {
                            s3 = peg$c273;
                            peg$currPos += 4;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c274);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            s3 = null;
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$currPos;
                            s5 = peg$parsespace();
                            if (s5 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 124) {
                                    s6 = peg$c275;
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c276);
                                    }
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parsespace();
                                    if (s7 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 6) === peg$c277) {
                                            s8 = peg$c277;
                                            peg$currPos += 6;
                                        } else {
                                            s8 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c278);
                                            }
                                        }
                                        if (s8 === peg$FAILED) {
                                            s8 = peg$currPos;
                                            if (input.substr(peg$currPos, 3) === peg$c279) {
                                                s9 = peg$c279;
                                                peg$currPos += 3;
                                            } else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c280);
                                                }
                                            }
                                            if (s9 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 2) === peg$c281) {
                                                    s9 = peg$c281;
                                                    peg$currPos += 2;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c282);
                                                    }
                                                }
                                            }
                                            if (s9 === peg$FAILED) {
                                                s9 = null;
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parsespace();
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parseExpression();
                                                    if (s11 !== peg$FAILED) {
                                                        s9 = [s9, s10, s11];
                                                        s8 = s9;
                                                    } else {
                                                        peg$currPos = s8;
                                                        s8 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s8;
                                                    s8 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s8;
                                                s8 = peg$FAILED;
                                            }
                                        }
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$currPos;
                                            s10 = peg$parsespace();
                                            if (s10 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 124) {
                                                    s11 = peg$c275;
                                                    peg$currPos++;
                                                } else {
                                                    s11 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c276);
                                                    }
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parsespace();
                                                    if (s12 !== peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c283) {
                                                            s13 = peg$c283;
                                                            peg$currPos += 5;
                                                        } else {
                                                            s13 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c284);
                                                            }
                                                        }
                                                        if (s13 !== peg$FAILED) {
                                                            s14 = peg$parsespace();
                                                            if (s14 !== peg$FAILED) {
                                                                s15 = peg$parseExpression();
                                                                if (s15 !== peg$FAILED) {
                                                                    s10 = [s10, s11, s12, s13, s14, s15];
                                                                    s9 = s10;
                                                                } else {
                                                                    peg$currPos = s9;
                                                                    s9 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s9;
                                                                s9 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s9;
                                                            s9 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s9;
                                                        s9 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s9;
                                                    s9 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s9;
                                                s9 = peg$FAILED;
                                            }
                                            if (s9 === peg$FAILED) {
                                                s9 = null;
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s5 = [s5, s6, s7, s8, s9];
                                                s4 = s5;
                                            } else {
                                                peg$currPos = s4;
                                                s4 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s4;
                                            s4 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s4;
                                        s4 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                            if (s4 === peg$FAILED) {
                                s4 = null;
                            }
                            if (s4 !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4];
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseRegexExpression() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseRegexExpressionA();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseRegexExpressionB();
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c285(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseRegexExpressionA() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

                s0 = peg$currPos;
                s1 = peg$parseREGEX();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseComma();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseExpression();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$currPos;
                                                s10 = peg$parseComma();
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parsespace();
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parseExpression();
                                                        if (s12 !== peg$FAILED) {
                                                            s10 = [s10, s11, s12];
                                                            s9 = s10;
                                                        } else {
                                                            peg$currPos = s9;
                                                            s9 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s9;
                                                        s9 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s9;
                                                    s9 = peg$FAILED;
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parsespace();
                                                    if (s10 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 41) {
                                                            s11 = peg$c78;
                                                            peg$currPos++;
                                                        } else {
                                                            s11 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c79);
                                                            }
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                                                            s0 = s1;
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseRegexExpressionB() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

                s0 = peg$currPos;
                s1 = peg$parseREGEX();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseComma();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseExpression();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsespace();
                                                if (s9 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                        s10 = peg$c78;
                                                        peg$currPos++;
                                                    } else {
                                                        s10 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c79);
                                                        }
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseREGEX() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c286) {
                    s1 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c287);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c288();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSUBSTRING() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c289) {
                    s1 = input.substr(peg$currPos, 9);
                    peg$currPos += 9;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c290);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c291();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSUBSTR() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c292) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c293);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c294();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsebifSUBSTRING() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 13).toLowerCase() === peg$c295) {
                    s1 = input.substr(peg$currPos, 13);
                    peg$currPos += 13;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c296);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c297();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsebifSUBSTR() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c298) {
                    s1 = input.substr(peg$currPos, 10);
                    peg$currPos += 10;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c299);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c300();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseREPLACE() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c301) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c302);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c303();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseEXISTS() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c304) {
                    s1 = input.substr(peg$currPos, 6);
                    peg$currPos += 6;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c305);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c306();
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSubstringExpression() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseSubstringExpressionA();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseSubstringExpressionB();
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c307(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSubstringExpressionA() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

                s0 = peg$currPos;
                s1 = peg$parseSUBSTRING();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseSUBSTR();
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                        s6 = peg$c121;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c122);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseExpression();
                                            if (s8 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 44) {
                                                    s9 = peg$c121;
                                                    peg$currPos++;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c122);
                                                    }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parsespace();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parseExpression();
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parsespace();
                                                            if (s12 !== peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                                    s13 = peg$c78;
                                                                    peg$currPos++;
                                                                } else {
                                                                    s13 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c79);
                                                                    }
                                                                }
                                                                if (s13 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c308(s4, s8, s11);
                                                                    s0 = s1;
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseSubstringExpressionB() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

                s0 = peg$currPos;
                s1 = peg$parseSUBSTRING();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseSUBSTR();
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                        s6 = peg$c121;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c122);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseExpression();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsespace();
                                                if (s9 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                        s10 = peg$c78;
                                                        peg$currPos++;
                                                    } else {
                                                        s10 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c79);
                                                        }
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c309(s4, s8);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseSubstringBifExpression() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseSubstringBifExpressionA();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseSubstringBifExpressionB();
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c310(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseSubstringBifExpressionA() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

                s0 = peg$currPos;
                s1 = peg$parsebifSUBSTRING();
                if (s1 === peg$FAILED) {
                    s1 = peg$parsebifSUBSTR();
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                        s6 = peg$c121;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c122);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseExpression();
                                            if (s8 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 44) {
                                                    s9 = peg$c121;
                                                    peg$currPos++;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c122);
                                                    }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parsespace();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parseExpression();
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parsespace();
                                                            if (s12 !== peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                                    s13 = peg$c78;
                                                                    peg$currPos++;
                                                                } else {
                                                                    s13 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c79);
                                                                    }
                                                                }
                                                                if (s13 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c308(s4, s8, s11);
                                                                    s0 = s1;
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseSubstringBifExpressionB() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

                s0 = peg$currPos;
                s1 = peg$parsebifSUBSTRING();
                if (s1 === peg$FAILED) {
                    s1 = peg$parsebifSUBSTR();
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                        s6 = peg$c121;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c122);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseExpression();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsespace();
                                                if (s9 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                        s10 = peg$c78;
                                                        peg$currPos++;
                                                    } else {
                                                        s10 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c79);
                                                        }
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c309(s4, s8);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseStrReplaceExpression() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseStrReplaceExpressionA();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseStrReplaceExpressionB();
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c311(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseStrReplaceExpressionA() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

                s0 = peg$currPos;
                s1 = peg$parseREPLACE();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                        s6 = peg$c121;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c122);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseExpression();
                                            if (s8 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 44) {
                                                    s9 = peg$c121;
                                                    peg$currPos++;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c122);
                                                    }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parsespace();
                                                    if (s10 !== peg$FAILED) {
                                                        s11 = peg$parseExpression();
                                                        if (s11 !== peg$FAILED) {
                                                            s12 = peg$parsespace();
                                                            if (s12 !== peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                                    s13 = peg$c78;
                                                                    peg$currPos++;
                                                                } else {
                                                                    s13 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c79);
                                                                    }
                                                                }
                                                                if (s13 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c308(s4, s8, s11);
                                                                    s0 = s1;
                                                                } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseStrReplaceExpressionB() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

                s0 = peg$currPos;
                s1 = peg$parseREPLACE();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseExpression();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                        s6 = peg$c121;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c122);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parsespace();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseExpression();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parsespace();
                                                if (s9 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                        s10 = peg$c78;
                                                        peg$currPos++;
                                                    } else {
                                                        s10 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c79);
                                                        }
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c309(s4, s8);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseExistsFunc() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseExistsFuncA1();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseExistsFuncA();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseExistsFuncB();
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c312(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseExistsFuncA1() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseEXISTS();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c76;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c77);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseExpression();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c78;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c79);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c313(s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseExistsFuncA() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseEXISTS();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseExpression();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c313(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseExistsFuncB() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseExpression();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 125) {
                                    s5 = peg$c8;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c9);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c313(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseNotExistsFunc() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseNotExistsFuncA();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseNotExistsFuncB1();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseNotExistsFuncB();
                        if (s1 === peg$FAILED) {
                            s1 = peg$parseNotExistsFuncC1();
                            if (s1 === peg$FAILED) {
                                s1 = peg$parseNotExistsFuncC();
                            }
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c314(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseNotExistsFuncA() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                s0 = peg$currPos;
                s1 = peg$parseNOT();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 123) {
                            s3 = peg$c6;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c7);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseExpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsespace();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 125) {
                                            s7 = peg$c8;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c9);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c313(s5);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseNotExistsFuncB() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = peg$parseNOT();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseEXISTS();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseExpression();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c313(s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseNotExistsFuncB1() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                s1 = peg$parseNOT();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseEXISTS();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 40) {
                                    s5 = peg$c76;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c77);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsespace();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseExpression();
                                        if (s7 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                                s8 = peg$c78;
                                                peg$currPos++;
                                            } else {
                                                s8 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c79);
                                                }
                                            }
                                            if (s8 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c313(s7);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseNotExistsFuncC() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parseNOT();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseExpression();
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c313(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseNotExistsFuncC1() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseNOT();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c76;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c77);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseExpression();
                                if (s5 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s6 = peg$c78;
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c79);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c313(s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseExpressionList2() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                s0 = peg$parseNIL();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s1 = peg$c76;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parsespace();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parseExpression();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parsespace();
                                if (s4 !== peg$FAILED) {
                                    s5 = [];
                                    s6 = peg$currPos;
                                    s7 = peg$parseComma();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsespace();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseExpression();
                                            if (s9 !== peg$FAILED) {
                                                s7 = [s7, s8, s9];
                                                s6 = s7;
                                            } else {
                                                peg$currPos = s6;
                                                s6 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s6;
                                            s6 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s6;
                                        s6 = peg$FAILED;
                                    }
                                    while (s6 !== peg$FAILED) {
                                        s5.push(s6);
                                        s6 = peg$currPos;
                                        s7 = peg$parseComma();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsespace();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parseExpression();
                                                if (s9 !== peg$FAILED) {
                                                    s7 = [s7, s8, s9];
                                                    s6 = s7;
                                                } else {
                                                    peg$currPos = s6;
                                                    s6 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s6;
                                                s6 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s6;
                                            s6 = peg$FAILED;
                                        }
                                    }
                                    if (s5 !== peg$FAILED) {
                                        s6 = peg$parsespace();
                                        if (s6 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                                s7 = peg$c78;
                                                peg$currPos++;
                                            } else {
                                                s7 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c79);
                                                }
                                            }
                                            if (s7 !== peg$FAILED) {
                                                s1 = [s1, s2, s3, s4, s5, s6, s7];
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }

                return s0;
            }

            function peg$parseExpressionList3() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseExpression();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                s5 = [];
                                s6 = peg$currPos;
                                s7 = peg$parseComma();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parsespace();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseExpression();
                                        if (s9 !== peg$FAILED) {
                                            s7 = [s7, s8, s9];
                                            s6 = s7;
                                        } else {
                                            peg$currPos = s6;
                                            s6 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s6;
                                        s6 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                }
                                while (s6 !== peg$FAILED) {
                                    s5.push(s6);
                                    s6 = peg$currPos;
                                    s7 = peg$parseComma();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parsespace();
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parseExpression();
                                            if (s9 !== peg$FAILED) {
                                                s7 = [s7, s8, s9];
                                                s6 = s7;
                                            } else {
                                                peg$currPos = s6;
                                                s6 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s6;
                                            s6 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s6;
                                        s6 = peg$FAILED;
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsespace();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 125) {
                                            s7 = peg$c8;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c9);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5, s6, s7];
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseExpressionList4() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 123) {
                    s1 = peg$c6;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c7);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseINTEGER();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c11) {
                                    s5 = peg$c11;
                                    peg$currPos += 2;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c12);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsespace();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseINTEGER();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsespace();
                                            if (s8 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 125) {
                                                    s9 = peg$c8;
                                                    peg$currPos++;
                                                } else {
                                                    s9 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c9);
                                                    }
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c13(s3, s7);
                                                    s0 = s1;
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseComma() {
                var s0, s1;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                    s1 = peg$c121;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c122);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c315(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseLANGTAG() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 64) {
                    s1 = peg$c316;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c317);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsestring();
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseRDFLiteralC() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseStringQuotes();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c318(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseiri() {
                var s0;

                s0 = peg$parseIRIREF();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsePrefixedName();
                }

                return s0;
            }

            function peg$parseIRIREF() {
                var s0, s1, s2, s3, s4;

                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 60) {
                    s2 = peg$c319;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c320);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    if (peg$c321.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c322);
                        }
                    }
                    if (s4 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 95) {
                            s4 = peg$c323;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c324);
                            }
                        }
                        if (s4 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 58) {
                                s4 = peg$c325;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c326);
                                }
                            }
                            if (s4 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 46) {
                                    s4 = peg$c14;
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c15);
                                    }
                                }
                                if (s4 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 35) {
                                        s4 = peg$c327;
                                        peg$currPos++;
                                    } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c328);
                                        }
                                    }
                                    if (s4 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 47) {
                                            s4 = peg$c61;
                                            peg$currPos++;
                                        } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c62);
                                            }
                                        }
                                        if (s4 === peg$FAILED) {
                                            if (peg$c329.test(input.charAt(peg$currPos))) {
                                                s4 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                            } else {
                                                s4 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c330);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        if (peg$c321.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c322);
                            }
                        }
                        if (s4 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 95) {
                                s4 = peg$c323;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c324);
                                }
                            }
                            if (s4 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                    s4 = peg$c325;
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c326);
                                    }
                                }
                                if (s4 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 46) {
                                        s4 = peg$c14;
                                        peg$currPos++;
                                    } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c15);
                                        }
                                    }
                                    if (s4 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 35) {
                                            s4 = peg$c327;
                                            peg$currPos++;
                                        } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c328);
                                            }
                                        }
                                        if (s4 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 47) {
                                                s4 = peg$c61;
                                                peg$currPos++;
                                            } else {
                                                s4 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c62);
                                                }
                                            }
                                            if (s4 === peg$FAILED) {
                                                if (peg$c329.test(input.charAt(peg$currPos))) {
                                                    s4 = input.charAt(peg$currPos);
                                                    peg$currPos++;
                                                } else {
                                                    s4 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c330);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s4 = peg$c331;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c332);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s2 = [s2, s3, s4];
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c333(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parsePrefixedName() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parsePNAME_LN();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c334(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parsePNAME_NS() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$currPos;
                s2 = peg$parseChars_String_prefix();
                if (s2 === peg$FAILED) {
                    s2 = null;
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s3 = peg$c325;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c326);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c335(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parsePNAME_LN() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = peg$currPos;
                s2 = peg$parsePNAME_NS();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseChars_String();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseSubstring();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseBetweenExpression();
                            if (s4 === peg$FAILED) {
                                s4 = null;
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseLikeExpression();
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c336(s1, s2, s4, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsePN_LOCAL() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseChars_String();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c337(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseiriOrFunction() {
                var s0;

                s0 = peg$parseiriOrFunctionA();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseiriOrFunctionB();
                }

                return s0;
            }

            function peg$parseiriOrFunctionA() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = peg$parseiri();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseArgList();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c338(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseiriOrFunctionB() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseiri();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c339(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseArgList() {
                var s0;

                s0 = peg$parseArgListA();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseArgListB();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseNIL();
                    }
                }

                return s0;
            }

            function peg$parseArgListA() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c76;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c77);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseDISTINCT();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseArgListExpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsespace();
                                    if (s6 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 41) {
                                            s7 = peg$c78;
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c79);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c340(s3, s5);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseArgListB() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c76;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c77);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseArgListExpression();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c78;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c79);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c341(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseNIL() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c76;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c77);
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                        s2 = peg$c78;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c79);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c342();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseArgListExpression() {
                var s0, s1, s2, s3, s4, s5, s6;

                s0 = peg$currPos;
                s1 = peg$parseExpression();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$currPos;
                    s4 = peg$parseComma();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsespace();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseExpression();
                            if (s6 !== peg$FAILED) {
                                s4 = [s4, s5, s6];
                                s3 = s4;
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$parseComma();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsespace();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseExpression();
                                if (s6 !== peg$FAILED) {
                                    s4 = [s4, s5, s6];
                                    s3 = s4;
                                } else {
                                    peg$currPos = s3;
                                    s3 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseNumericLiteral() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseNumericLiteralUnsigned();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseNumericLiteralPositive();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseNumericLiteralNegative();
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c343(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseNumericLiteralUnsigned() {
                var s0;

                s0 = peg$parseDOUBLE();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseDECIMAL();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseINTEGER();
                    }
                }

                return s0;
            }

            function peg$parseNumericLiteralPositive() {
                var s0;

                s0 = peg$parseDECIMAL_POSITIVE();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseDOUBLE_POSITIVE();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseINTEGER_POSITIVE();
                    }
                }

                return s0;
            }

            function peg$parseNumericLiteralNegative() {
                var s0;

                s0 = peg$parseDECIMAL_NEGATIVE();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseDOUBLE_NEGATIVE();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseINTEGER_NEGATIVE();
                    }
                }

                return s0;
            }

            function peg$parseDECIMAL() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = peg$currPos;
                s2 = [];
                if (peg$c329.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c330);
                    }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (peg$c329.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c330);
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s3 = peg$c14;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c15);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        if (peg$c329.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c330);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                if (peg$c329.test(input.charAt(peg$currPos))) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c330);
                                    }
                                }
                            }
                        } else {
                            s4 = peg$FAILED;
                        }
                        if (s4 !== peg$FAILED) {
                            s2 = [s2, s3, s4];
                            s1 = s2;
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c344(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseDOUBLE() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8;

                s0 = peg$currPos;
                s1 = peg$currPos;
                s2 = [];
                if (peg$c329.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c330);
                    }
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c329.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c330);
                            }
                        }
                    }
                } else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s3 = peg$c14;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c15);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        if (peg$c329.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c330);
                            }
                        }
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            if (peg$c329.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c330);
                                }
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            if (peg$c345.test(input.charAt(peg$currPos))) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c346);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                if (peg$c347.test(input.charAt(peg$currPos))) {
                                    s6 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c348);
                                    }
                                }
                                if (s6 === peg$FAILED) {
                                    s6 = null;
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = [];
                                    if (peg$c329.test(input.charAt(peg$currPos))) {
                                        s8 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s8 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c330);
                                        }
                                    }
                                    if (s8 !== peg$FAILED) {
                                        while (s8 !== peg$FAILED) {
                                            s7.push(s8);
                                            if (peg$c329.test(input.charAt(peg$currPos))) {
                                                s8 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                            } else {
                                                s8 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c330);
                                                }
                                            }
                                        }
                                    } else {
                                        s7 = peg$FAILED;
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s2 = [s2, s3, s4, s5, s6, s7];
                                        s1 = s2;
                                    } else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s1;
                                    s1 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 === peg$FAILED) {
                    s1 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s2 = peg$c14;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c15);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        if (peg$c329.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c330);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            while (s4 !== peg$FAILED) {
                                s3.push(s4);
                                if (peg$c329.test(input.charAt(peg$currPos))) {
                                    s4 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c330);
                                    }
                                }
                            }
                        } else {
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            if (peg$c345.test(input.charAt(peg$currPos))) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c346);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                if (peg$c347.test(input.charAt(peg$currPos))) {
                                    s5 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c348);
                                    }
                                }
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = [];
                                    if (peg$c329.test(input.charAt(peg$currPos))) {
                                        s7 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c330);
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        while (s7 !== peg$FAILED) {
                                            s6.push(s7);
                                            if (peg$c329.test(input.charAt(peg$currPos))) {
                                                s7 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                            } else {
                                                s7 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c330);
                                                }
                                            }
                                        }
                                    } else {
                                        s6 = peg$FAILED;
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s2 = [s2, s3, s4, s5, s6];
                                        s1 = s2;
                                    } else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s1;
                                    s1 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                    if (s1 === peg$FAILED) {
                        s1 = peg$currPos;
                        s2 = [];
                        if (peg$c329.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c330);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            while (s3 !== peg$FAILED) {
                                s2.push(s3);
                                if (peg$c329.test(input.charAt(peg$currPos))) {
                                    s3 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c330);
                                    }
                                }
                            }
                        } else {
                            s2 = peg$FAILED;
                        }
                        if (s2 !== peg$FAILED) {
                            if (peg$c345.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c346);
                                }
                            }
                            if (s3 !== peg$FAILED) {
                                if (peg$c347.test(input.charAt(peg$currPos))) {
                                    s4 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c348);
                                    }
                                }
                                if (s4 === peg$FAILED) {
                                    s4 = null;
                                }
                                if (s4 !== peg$FAILED) {
                                    s5 = [];
                                    if (peg$c329.test(input.charAt(peg$currPos))) {
                                        s6 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s6 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c330);
                                        }
                                    }
                                    if (s6 !== peg$FAILED) {
                                        while (s6 !== peg$FAILED) {
                                            s5.push(s6);
                                            if (peg$c329.test(input.charAt(peg$currPos))) {
                                                s6 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                            } else {
                                                s6 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c330);
                                                }
                                            }
                                        }
                                    } else {
                                        s5 = peg$FAILED;
                                    }
                                    if (s5 !== peg$FAILED) {
                                        s2 = [s2, s3, s4, s5];
                                        s1 = s2;
                                    } else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s1;
                                    s1 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c349(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseINTEGER() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                if (peg$c329.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c330);
                    }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c329.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c330);
                            }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c350(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseINTEGER_POSITIVE() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 43) {
                    s2 = peg$c49;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c50);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseINTEGER();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c351(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseDECIMAL_POSITIVE() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 43) {
                    s2 = peg$c49;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c50);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseDECIMAL();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c351(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseDOUBLE_POSITIVE() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                    s2 = peg$c51;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c52);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseDOUBLE();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c351(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseINTEGER_NEGATIVE() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                    s2 = peg$c51;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c52);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseINTEGER();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c351(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseDECIMAL_NEGATIVE() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                    s2 = peg$c51;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c52);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseDECIMAL();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c351(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseDOUBLE_NEGATIVE() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                    s2 = peg$c51;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c52);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseDOUBLE();
                    if (s3 !== peg$FAILED) {
                        s2 = [s2, s3];
                        s1 = s2;
                    } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c351(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseVar() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseVAR1();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseVAR2();
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c352(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseVAR1() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 63) {
                    s1 = peg$c353;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c354);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseVARNAME();
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseVAR2() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 36) {
                    s1 = peg$c355;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c356);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseVARNAME();
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseVARNAME() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (peg$c321.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c322);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 95) {
                        s1 = peg$c323;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c324);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c321.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c322);
                        }
                    }
                    if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 95) {
                            s3 = peg$c323;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c324);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (peg$c329.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c330);
                                }
                            }
                        }
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c321.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c322);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 95) {
                                s3 = peg$c323;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c324);
                                }
                            }
                            if (s3 === peg$FAILED) {
                                if (peg$c329.test(input.charAt(peg$currPos))) {
                                    s3 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c330);
                                    }
                                }
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseStringQuotes() {
                var s0;

                s0 = peg$parseSTRING_LITERAL1();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseSTRING_LITERAL2();
                }

                return s0;
            }

            function peg$parseSTRING_LITERAL1() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                    s1 = peg$c357;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c358);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsestring();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                            s3 = peg$c357;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c358);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseSTRING_LITERAL2() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                    s1 = peg$c359;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c360);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsestring();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 34) {
                            s3 = peg$c359;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c360);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseQName() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseQNameB();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c361(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseQNameB() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsepath();
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        s2 = peg$parsepath();
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsePrimaryExpression2();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseBetweenExpression();
                            if (s4 === peg$FAILED) {
                                s4 = null;
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseLikeExpression();
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c362(s1, s2, s4, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsepath() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                s1 = peg$parsepath2();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                            s3 = peg$c14;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c15);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c363(s1);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parsepath2() {
                var s0;

                s0 = peg$parseinvPath1();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseinvPath2();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseinvPath3();
                    }
                }

                return s0;
            }

            function peg$parseinvPath1() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4) === peg$c364) {
                    s1 = peg$c364;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c365);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseChars_String();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s3 = peg$c78;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c79);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c366(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseinvPath2() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 94) {
                    s1 = peg$c367;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c368);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseChars_String();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c366(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseinvPath3() {
                var s0, s1;

                s0 = peg$currPos;
                s1 = peg$parseChars_String();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c369(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseChars_String() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (peg$c321.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c322);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 95) {
                        s1 = peg$c323;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c324);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c321.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c322);
                        }
                    }
                    if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 95) {
                            s3 = peg$c323;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c324);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (peg$c329.test(input.charAt(peg$currPos))) {
                                s3 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c330);
                                }
                            }
                        }
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c321.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c322);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 95) {
                                s3 = peg$c323;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c324);
                                }
                            }
                            if (s3 === peg$FAILED) {
                                if (peg$c329.test(input.charAt(peg$currPos))) {
                                    s3 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c330);
                                    }
                                }
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseChars_String_prefix() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (peg$c321.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c322);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 95) {
                        s1 = peg$c323;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c324);
                        }
                    }
                    if (s1 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 45) {
                            s1 = peg$c51;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c52);
                            }
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (peg$c321.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c322);
                        }
                    }
                    if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 95) {
                            s3 = peg$c323;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c324);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 45) {
                                s3 = peg$c51;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c52);
                                }
                            }
                            if (s3 === peg$FAILED) {
                                if (peg$c329.test(input.charAt(peg$currPos))) {
                                    s3 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c330);
                                    }
                                }
                            }
                        }
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c321.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c322);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 95) {
                                s3 = peg$c323;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c324);
                                }
                            }
                            if (s3 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 45) {
                                    s3 = peg$c51;
                                    peg$currPos++;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c52);
                                    }
                                }
                                if (s3 === peg$FAILED) {
                                    if (peg$c329.test(input.charAt(peg$currPos))) {
                                        s3 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c330);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseLName() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                s1 = peg$parseChars_String();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseSubstring();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsespace();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseBetweenExpression();
                            if (s4 === peg$FAILED) {
                                s4 = null;
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseLikeExpression();
                                if (s5 === peg$FAILED) {
                                    s5 = null;
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c336(s1, s2, s4, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseLN() {
                var s0;

                s0 = peg$parseLNameINV();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseLNameINV2();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseLName();
                    }
                }

                return s0;
            }

            function peg$parseLNameINV2() {
                var s0, s1, s2;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 94) {
                    s1 = peg$c367;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c368);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseLNameSimple();
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseSubstring() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c370;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c371);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseINTEGER();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c121;
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c122);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parsespace();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseINTEGER();
                                if (s7 !== peg$FAILED) {
                                    s5 = [s5, s6, s7];
                                    s4 = s5;
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                        if (s4 === peg$FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                            s3 = [s3, s4];
                            s2 = s3;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s3 = peg$c372;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c373);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s1 = [s1, s2, s3];
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = null;
                }

                return s0;
            }

            function peg$parseLNameSimple() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = peg$parseChars_String();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseSubstring();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c374(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseLNameINV() {
                var s0, s1, s2, s3, s4, s5, s6, s7;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 3) === peg$c375) {
                    s1 = peg$c375;
                    peg$currPos += 3;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c376);
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s2 = peg$c76;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c77);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseLNameSimple();
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s4 = peg$c78;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c79);
                                }
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsespace();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseBetweenExpression();
                                    if (s6 === peg$FAILED) {
                                        s6 = null;
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseLikeExpression();
                                        if (s7 === peg$FAILED) {
                                            s7 = null;
                                        }
                                        if (s7 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c377(s1, s3, s6, s7);
                                            s0 = s1;
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseLName2() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = peg$parseChars_String();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseSubstring();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c374(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseRelation() {
                var s0;

                if (input.charCodeAt(peg$currPos) === 61) {
                    s0 = peg$c119;
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c120);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c378) {
                        s0 = peg$c378;
                        peg$currPos += 2;
                    } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c379);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c380) {
                            s0 = peg$c380;
                            peg$currPos += 2;
                        } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c381);
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c382) {
                                s0 = peg$c382;
                                peg$currPos += 2;
                            } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c383);
                                }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c384) {
                                    s0 = peg$c384;
                                    peg$currPos += 2;
                                } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c385);
                                    }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 60) {
                                        s0 = peg$c319;
                                        peg$currPos++;
                                    } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c320);
                                        }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 62) {
                                            s0 = peg$c331;
                                            peg$currPos++;
                                        } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c332);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                return s0;
            }

            function peg$parsespace() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                if (input.charCodeAt(peg$currPos) === 32) {
                    s2 = peg$c386;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c387);
                    }
                }
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (input.charCodeAt(peg$currPos) === 32) {
                        s2 = peg$c386;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c387);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c388();
                }
                s0 = s1;

                return s0;
            }

            function peg$parsestring() {
                var s0, s1, s2;

                s0 = peg$currPos;
                s1 = [];
                if (peg$c321.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c322);
                    }
                }
                if (s2 === peg$FAILED) {
                    if (peg$c329.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c330);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        if (peg$c389.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c390);
                            }
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    while (s2 !== peg$FAILED) {
                        s1.push(s2);
                        if (peg$c321.test(input.charAt(peg$currPos))) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c322);
                            }
                        }
                        if (s2 === peg$FAILED) {
                            if (peg$c329.test(input.charAt(peg$currPos))) {
                                s2 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c330);
                                }
                            }
                            if (s2 === peg$FAILED) {
                                if (peg$c389.test(input.charAt(peg$currPos))) {
                                    s2 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c390);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    s1 = peg$FAILED;
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c391(s1);
                }
                s0 = s1;

                return s0;
            }

            function peg$parseLikeExpression() {
                var s0, s1, s2, s3;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c392) {
                    s1 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c393);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parselikeString1();
                        if (s3 === peg$FAILED) {
                            s3 = peg$parselikeString2();
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c394(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parselikeString1() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 34) {
                    s1 = peg$c359;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c360);
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 37) {
                        s2 = peg$c395;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c396);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        if (peg$c321.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c322);
                            }
                        }
                        if (s4 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 95) {
                                s4 = peg$c323;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c324);
                                }
                            }
                            if (s4 === peg$FAILED) {
                                if (peg$c329.test(input.charAt(peg$currPos))) {
                                    s4 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c330);
                                    }
                                }
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            while (s4 !== peg$FAILED) {
                                s3.push(s4);
                                if (peg$c321.test(input.charAt(peg$currPos))) {
                                    s4 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c322);
                                    }
                                }
                                if (s4 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 95) {
                                        s4 = peg$c323;
                                        peg$currPos++;
                                    } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c324);
                                        }
                                    }
                                    if (s4 === peg$FAILED) {
                                        if (peg$c329.test(input.charAt(peg$currPos))) {
                                            s4 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                        } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c330);
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 37) {
                                s4 = peg$c395;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c396);
                                }
                            }
                            if (s4 === peg$FAILED) {
                                s4 = null;
                            }
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 34) {
                                    s5 = peg$c359;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c360);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c397(s2, s3, s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parselikeString2() {
                var s0, s1, s2, s3, s4, s5;

                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                    s1 = peg$c357;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c358);
                    }
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 37) {
                        s2 = peg$c395;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c396);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        s2 = null;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        if (peg$c321.test(input.charAt(peg$currPos))) {
                            s4 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c322);
                            }
                        }
                        if (s4 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 95) {
                                s4 = peg$c323;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c324);
                                }
                            }
                            if (s4 === peg$FAILED) {
                                if (peg$c329.test(input.charAt(peg$currPos))) {
                                    s4 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c330);
                                    }
                                }
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            while (s4 !== peg$FAILED) {
                                s3.push(s4);
                                if (peg$c321.test(input.charAt(peg$currPos))) {
                                    s4 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c322);
                                    }
                                }
                                if (s4 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 95) {
                                        s4 = peg$c323;
                                        peg$currPos++;
                                    } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c324);
                                        }
                                    }
                                    if (s4 === peg$FAILED) {
                                        if (peg$c329.test(input.charAt(peg$currPos))) {
                                            s4 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                        } else {
                                            s4 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c330);
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            s3 = peg$FAILED;
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 37) {
                                s4 = peg$c395;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c396);
                                }
                            }
                            if (s4 === peg$FAILED) {
                                s4 = null;
                            }
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 39) {
                                    s5 = peg$c357;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c358);
                                    }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c397(s2, s3, s4);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }

            function peg$parseBetweenExpression() {
                var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

                s0 = peg$currPos;
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c398) {
                    s1 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c399);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsespace();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                            s3 = peg$c76;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c77);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parsespace();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseNumericExpression();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsespace();
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parseComma();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parsespace();
                                            if (s8 !== peg$FAILED) {
                                                s9 = peg$parseNumericExpression();
                                                if (s9 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                        s10 = peg$c78;
                                                        peg$currPos++;
                                                    } else {
                                                        s10 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c79);
                                                        }
                                                    }
                                                    if (s10 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c400(s5, s9);
                                                        s0 = s1;
                                                    } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }

                return s0;
            }


            // parse can have multiple arguments
            // parse(string, options) where options is an object
            // {schema: VQ_Schema, symbol_table:JSON, context:class_identification_object}
            options = arguments[1];
            //console.log(options);

            function makeVar(o) {
                return makeString(o);
            };

            // string -> idObject
            // returns type of the identifier from symbol table. Null if does not exist.
            function resolveTypeFromSymbolTable(id) {
                var st_row = options.symbol_table[id];
                if (st_row) {
                    return st_row.type
                } else {
                    return null
                }
            };
            // string -> idObject
            // returns kind of the identifier from symbol table. Null if does not exist.
            function resolveKindFromSymbolTable(id) {
                var st_row = options.symbol_table[id];
                if (st_row) {
                    return st_row.kind
                } else {
                    return null
                }
            };
            // string -> idObject
            // returns type of the identifier from schema assuming that it is name of the class. Null if does not exist
            function resolveTypeFromSchemaForClass(id) {
                return options.schema.resolveClassByName(id)
            };
            // string -> idObject
            // returns type of the identifier from schema assuming that it is name of the property (attribute or association). Null if does not exist
            function resolveTypeFromSchemaForAttributeAndLink(id) {
                var aorl = options.schema.resolveAttributeByName(null, id);
                if (!aorl) {
                    aorl = options.schema.resolveLinkByName(id)
                };
                return aorl
            };
            // string -> idObject
            // returns type of the identifier from schema. Looks everywhere. First in the symbol table,
            // then in schema. Null if does not exist
            function resolveType(id) {
                var t = resolveTypeFromSymbolTable(id);
                if (!t) {
                    t = resolveTypeFromSchemaForClass(id);
                    if (!t) {
                        t = resolveTypeFromSchemaForAttributeAndLink(id)
                    }
                }
                return t;
            };
            //string -> string
            // resolves kind of id. CLASS_ALIAS, PROPERTY_ALIAS, CLASS_NAME, CLASS_ALIAS, null
            function resolveKind(id) {
                var k = resolveKindFromSymbolTable(id);
                if (!k) {
                    if (resolveTypeFromSchemaForClass(id)) {
                        k = "CLASS_NAME";
                    } else if (resolveTypeFromSchemaForAttributeAndLink(id)) {
                        k = "PROPERTY_NAME";
                    }
                }
                return k;
            };

            function pathOrReference(o) {
                //var classInstences = ["a", "b", "c"] // seit vajadzigas visas klases
                // It does not make sense calculate this every time function is called, but ...
                var classInstances = _.keys(_.omit(options.symbol_table, function(value, key, object) {
                    return _.isNull(value.type)
                }));

                if (o["Path"][0] != null && o["Path"][1] == null && classInstances.indexOf(o["Path"][0]["path"]["name"]) > -1) {
                    //-----ReferenceToClass----- return {Reference: {name:o["Path"][0]["path"]["name"], type:resolveTypeFromSymbolTable(o["Path"][0]["path"]["name"])}, var : o["PrimaryExpression"]["var"], Substring : o["PrimaryExpression"]["Substring"], ReferenceToClass: o["ReferenceToClass"], FunctionBETWEEN : o["FunctionBETWEEN"], FunctionLike : o["FunctionLike"]}
                    return {
                        Reference: {
                            name: o["Path"][0]["path"]["name"],
                            type: resolveTypeFromSymbolTable(o["Path"][0]["path"]["name"])
                        },
                        var: o["PrimaryExpression"]["var"],
                        Substring: o["PrimaryExpression"]["Substring"],
                        FunctionBETWEEN: o["FunctionBETWEEN"],
                        FunctionLike: o["FunctionLike"]
                    }
                }
                return o;
            };

            function transformExpressionIntegerScopeToList(start, end) {
                var s = parseInt(start["Number"]);
                var e = parseInt(end["Number"]);
                var expressionList = [];
                for (var i = s; i <= e; i++) {
                    expressionList.push({
                        "NumericLiteral": {
                            "Number": i
                        }
                    });
                    if (i != e) expressionList.push({
                        "Comma": ","
                    });
                }
                return expressionList;
            }


            peg$result = peg$startRuleFunction();

            if (peg$result !== peg$FAILED && peg$currPos === input.length) {
                return peg$result;
            } else {
                if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                    peg$fail({
                        type: "end",
                        description: "end of input"
                    });
                }

                throw peg$buildException(
                    null,
                    peg$maxFailExpected,
                    peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
                    peg$maxFailPos < input.length ?
                    peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) :
                    peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
                );
            }
        }

        return {
            SyntaxError: peg$SyntaxError,
            parse: peg$parse
        };
    })()
}).call(this);
